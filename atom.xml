<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lany</title>
  <subtitle>努力搬砖ing···</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lany.me/"/>
  <updated>2016-11-20T07:50:49.941Z</updated>
  <id>https://lany.me/</id>
  
  <author>
    <name>Lany</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>让多说评论头像，表情支持https</title>
    <link href="https://lany.me/front/hexo-duoshuo/"/>
    <id>https://lany.me/front/hexo-duoshuo/</id>
    <published>2016-11-09T08:34:22.000Z</published>
    <updated>2016-11-20T07:50:49.941Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 原理 </strong>：将 https 图片转由七牛镜像 CDN 处理</p>
<a id="more"></a>
<h3 id="方法一-直接调用"><a href="#方法一-直接调用" class="headerlink" title="方法一(直接调用)"></a>方法一(直接调用)</h3><p>直接替换多说 <a href="https://dn-bim.qbox.me/js/duoshuo.js" target="_blank" rel="external">embed.js</a></p>
<h3 id="方法二-自己修改"><a href="#方法二-自己修改" class="headerlink" title="方法二(自己修改)"></a>方法二(自己修改)</h3><h4 id="1-修改头像-https-支持"><a href="#1-修改头像-https-支持" class="headerlink" title="1. 修改头像 https 支持"></a>1. 修改头像 https 支持</h4><blockquote>
<p>embed.js 中搜索<code>avatarUrl: function(e, t)</code>，将下方<code>/* ··· */</code>中代码插入如下位置</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">avatarUrl: <span class="function"><span class="keyword">function</span>(<span class="params">e, t</span>) </span>&#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line">    if (document.location.protocol == "https:") &#123;</div><div class="line">        if (e.avatar_url) &#123;</div><div class="line">            e.avatar_url = e.avatar_url.replace(/^http\:\/\//, "https://");</div><div class="line">            e.avatar_url = e.avatar_url.replace(/himg\.bdimg\.com/, "nzriuc44h.qnssl.com");</div><div class="line">            e.avatar_url = e.avatar_url.replace(/ds\.cdncache\.org/, "nzrisok3d.qnssl.com");</div><div class="line">            e.avatar_url = e.avatar_url.replace(/img\.kaixin001\.com\.cn/, "nzrktdox3.qnssl.com");</div><div class="line">            e.avatar_url = e.avatar_url.replace(/img\d+\.douban\.com/, "img1.doubanio.com");</div><div class="line">            e.avatar_url = e.avatar_url.replace(/app\.qlogo\.cn/, "nzvcelvwu.qnssl.com");</div><div class="line">            e.avatar_url = e.avatar_url.replace(/wx\.qlogo\.cn/, "nzwsf9aei.qnssl.com");</div><div class="line">            e.avatar_url = e.avatar_url.replace(/tp\d+\.sinaimg\.cn/, "odfhb4m72.qnssl.com");</div><div class="line">            e.avatar_url = e.avatar_url.replace('img.t.sinajs.cn', "nznlz6ohs.qnssl.com");</div><div class="line">            e.avatar_url = e.avatar_url.replace('0.gravatar.com/avatar', "cdn.v2ex.com/gravatar");</div><div class="line">        &#125; else &#123;</div><div class="line">            rt.data.default_avatar_url = rt.data.default_avatar_url.replace(/^http\:\/\//, "https://");</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    */</div><div class="line">    <span class="keyword">return</span> e.avatar_url || nt.data.default_avatar_url</div></pre></td></tr></table></figure>
<blockquote>
<p>embed.js 中搜索<code>return &#39;&lt;li class=&quot;ds-ctx-entry&quot;</code>，将下方<code>/* ··· */</code>中代码插入如下位置</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ctxPost: <span class="function"><span class="keyword">function</span>(<span class="params">e, t, n</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> r = K(e);</div><div class="line">    <span class="comment">/*</span></div><div class="line">    e.message = e.message.replace(/src=(["|'])http:\/\//g, "src=$1//nznlz6ohs.qnssl.com/");</div><div class="line">    e.message = e.message.replace('img.t.sinajs.cn/', '');</div><div class="line">    */</div><div class="line">    <span class="keyword">return</span> <span class="string">'&lt;li class="ds-ctx-entry"'</span> ·····</div></pre></td></tr></table></figure>
<h4 id="2-修改表情-https-支持"><a href="#2-修改表情-https-支持" class="headerlink" title="2. 修改表情 https 支持"></a>2. 修改表情 https 支持</h4><blockquote>
<p>embed.js 中搜索<code>http://img.t.sinajs.cn/t35/style/images/common/face/ext/normal/</code>，将下方<code>/* ··· */</code>中代码插入如下位置</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params">t, r</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> i = e.indexOf(<span class="string">"\u5fae\u535a"</span>) === <span class="number">0</span> ? <span class="string">"http://img.t.sinajs.cn/t35/style/images/common/face/ext/normal/"</span> + r.replace(<span class="string">"_org"</span>, <span class="string">"_thumb"</span>) : b + <span class="string">"/images/smilies/"</span> + r;</div><div class="line">    <span class="comment">/*</span></div><div class="line">        if (document.location.protocol == 'https:') &#123;</div><div class="line">            i = i.replace("http://", "//nznlz6ohs.qnssl.com/");</div><div class="line">            i = i.replace("http://img.t.sinajs.cn/", "//nznlz6ohs.qnssl.com/");</div><div class="line">        &#125;</div><div class="line">        i = i.replace("_org.gif", "_thumb.gif");</div><div class="line">    */</div><div class="line">    e === <span class="string">"WordPress"</span> &amp;&amp; (t = <span class="string">" "</span> + t + <span class="string">" "</span>),</div><div class="line">    n += <span class="string">'&lt;li&gt;&lt;img src="'</span> + i + <span class="string">'" title="'</span> + p(t) + <span class="string">'" /&gt;&lt;/li&gt;'</span></div><div class="line">&#125;),</div></pre></td></tr></table></figure>
<blockquote>
<p>embed.js 中搜索<code>&lt;li class=&quot;ds-post&quot; data-post-id=&quot;</code>，将下方<code>/* ··· */</code>中代码插入如下位置</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> <span class="string">"weibo"</span>:</div><div class="line">    o += <span class="string">'&lt;a class="ds-weibo-comments" href="javascript:void(0);"&gt;'</span> + k.comments + (e.type.match(<span class="regexp">/\-comment$/</span>) ? <span class="string">""</span>: <span class="string">'(&lt;span class="ds-count"&gt;'</span> + e.comments + <span class="string">"&lt;/span&gt;)"</span>) + <span class="string">"&lt;/a&gt;"</span> + <span class="string">'&lt;a class="ds-weibo-reposts" href="javascript:void(0);"&gt;'</span> + k.reposts + (e.type.match(<span class="regexp">/\-comment$/</span>) ? <span class="string">""</span>: <span class="string">'(&lt;span class="ds-count"&gt;'</span> + e.reposts + <span class="string">"&lt;/span&gt;)"</span>) + <span class="string">"&lt;/a&gt;"</span>;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line"><span class="keyword">default</span>:</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line">if (document.location.protocol == 'https:') &#123;</div><div class="line">    if (e.message.indexOf('static.duoshuo.com') == '-1') &#123;</div><div class="line">        e.message = e.message.replace(/src=(["|'])http:\/\//g, "src=$1//nznlz6ohs.qnssl.com/");</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">if (e.message.indexOf('static.duoshuo.com') != '-1') &#123;</div><div class="line">    e.message = e.message.replace(/src=(["|'])http:\/\//g, "src=$1https://");</div><div class="line">&#125;</div><div class="line">e.message = e.message.replace(/_org.gif/g, "_thumb.gif");</div><div class="line">*/</div><div class="line"><span class="keyword">return</span> <span class="string">'&lt;li class="ds-post" data-post-id="'</span> ·····</div></pre></td></tr></table></figure>
<h4 id="3-修改-WS-为-WSS"><a href="#3-修改-WS-为-WSS" class="headerlink" title="3. 修改 WS 为 WSS"></a>3. 修改 WS 为 WSS</h4><blockquote>
<p>embed.js 中搜索<code>ws://ws.duoshuo.com:8201/</code>，将它替换成</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wss:<span class="comment">//ws.duoshuo.com:8202/</span></div></pre></td></tr></table></figure>
<blockquote>
<p>主要参考 @rainwsy 的<code>https://github.com/rainwsy/duoshuo-https</code>中的代码。</p>
<p>由于我自己的 embed.js 增加了 UA 标识等代码，因此就没有直接使用 @rainwsy 的，自己修改了代码，hexo 的可以使用我的 embed.js，也可以使用 @rainwsy 的 embed.js。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 原理 &lt;/strong&gt;：将 https 图片转由七牛镜像 CDN 处理&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://lany.me/category/front/"/>
    
    
      <category term="Hexo" scheme="https://lany.me/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>算法排序学习</title>
    <link href="https://lany.me/learn/algorithm-basics/"/>
    <id>https://lany.me/learn/algorithm-basics/</id>
    <published>2016-11-03T13:51:53.000Z</published>
    <updated>2016-11-20T07:34:30.853Z</updated>
    
    <content type="html"><![CDATA[<p>从今天开始逐步开始学习算法部分的内容。</p>
<a id="more"></a>
<h2 id="算法基础"><a href="#算法基础" class="headerlink" title="算法基础"></a>算法基础</h2><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><blockquote>
<p><strong>时间复杂度</strong>：$O(n^2)$</p>
<ul>
<li>插入排序的工作方式像排序一手扑克牌，开始时，我们的左手为空并且桌子上的牌面向下。然后，我们每次从桌子上拿走一张牌并将它插入左手中正确的位置。为了找到一张牌的正确位置，我们从右到左将它与已在手中的每张牌进行比较，然后找到合适的位置将其插入。然后重复抓牌，插入。</li>
<li>理解原理之后，我们开始着手实现。先定义一个的数组 int arr[128] = { 5,1,8,7,4,2,3,9,6 }; 可以理解为洗好的牌。</li>
<li>第二部开始抓第一张牌，然后再抓第二张拍，做比较，然后根据比较结果插入。这里我们采用一个 while 判断循环来实现 <code>对比 → 插入</code> 的过程。并且有多少张牌我们就要重复抓取几次，因此我们写一个 for 循环来进行抓牌。</li>
</ul>
</blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> mun = <span class="number">6</span>;                        <span class="comment">//假如现在有 6 张牌</span></div><div class="line"><span class="keyword">int</span> a[<span class="number">6</span>] = &#123; <span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">3</span> &#125;;         <span class="comment">//然后我们将 6 张牌洗乱</span></div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertionSort</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; mun; i++)   <span class="comment">//第一张牌不需要比较，对比是第二张牌开始的，所以 i = 1 。</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> key = a[i];             <span class="comment">//将牌抓到右手，避免插入的时候 arr[i] 被覆盖掉导致对比出错</span></div><div class="line">        <span class="keyword">int</span> j = i - <span class="number">1</span>;              <span class="comment">//左手的牌是从第一张开始的，因此 j = i - 1 ，第一次循环时为 0 ，第二次为1，······</span></div><div class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; a[j] &gt; key)<span class="comment">//这里开始进行从右到左的对比，直到最左边没牌为止。</span></div><div class="line">        &#123;</div><div class="line">            a[j + <span class="number">1</span>] = a[j];        <span class="comment">//若左手中右边的牌比左边的小，那么将左边的向右移一位</span></div><div class="line">            j--;                    <span class="comment">//然后继续向左，</span></div><div class="line">        &#125;                           <span class="comment">//跳到 `while` 继续对比，直到左边比右边小结束循环。</span></div><div class="line">        arr[j + <span class="number">1</span>] = key;           <span class="comment">//对比完之后，将右手的牌插入进去，由于上面 `j--` 了一次，然后跳出了循环，因此这里需要`j+1`加一次,保证牌不会插左边去了。</span></div><div class="line">    &#125;                               <span class="comment">//第二张牌插完后，继续抓第三张对比插入，再第四张·····直到全部抓完。</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>下面用一个插图形象表示下</p>
</blockquote>
<p><img src="https://ws3.sinaimg.cn/large/a05bd5c8jw1f9fafxtizmj20tj07p404.jpg" alt="算法工作流程"></p>
<blockquote>
<p>练习：</p>
<ul>
<li>[x] 根据上图为模型重写 <code>void InsertionSort()</code> 使之变降序排列</li>
</ul>
</blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> mun = <span class="number">6</span>;</div><div class="line"><span class="keyword">int</span> a[<span class="number">6</span>] = &#123; <span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">3</span> &#125;;</div><div class="line">	</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertionSort</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; mun; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> key = a[i];</div><div class="line">        <span class="keyword">int</span> j = i - <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; a[j] &lt; key) <span class="comment">//将 &gt; 改成 &lt; ，变为降序排列</span></div><div class="line">        &#123;</div><div class="line">            a[j + <span class="number">1</span>] = a[j];</div><div class="line">            j--;</div><div class="line">        &#125;</div><div class="line">        a[j + <span class="number">1</span>] = key;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从今天开始逐步开始学习算法部分的内容。&lt;/p&gt;
    
    </summary>
    
      <category term="学习" scheme="https://lany.me/category/learn/"/>
    
    
      <category term="算法" scheme="https://lany.me/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>一个建筑规范批量查询小工具</title>
    <link href="https://lany.me/null/tool-gfgqcx/"/>
    <id>https://lany.me/null/tool-gfgqcx/</id>
    <published>2016-10-25T14:07:09.000Z</published>
    <updated>2016-11-20T07:56:38.193Z</updated>
    
    <content type="html"><![CDATA[<p>今天工作需要用到批量查询一些建筑规范是否已经过期作废，翻到几年前写的源码，把功能加强了下满足目前的工作需要，顺便增加了个简易自动更新的功能，也许过几年又想起来更新下呢。。。</p>
<ul>
<li><a href="//of47m4z09.qnssl.com/%E8%A7%84%E8%8C%83%E8%BF%87%E6%9C%9F%E6%9F%A5%E8%AF%A2.exe"><strong> 下载地址 </strong></a>(这是搬砖的人才用的玩意，不是搬砖的就不要下载了。。。)<p><span>最后更新:</span>2016-11-11, 17:09:53</p><p></p></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天工作需要用到批量查询一些建筑规范是否已经过期作废，翻到几年前写的源码，把功能加强了下满足目前的工作需要，顺便增加了个简易自动更新的功能，也许过几年又想起来更新下呢。。。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;//of47m4z09.qnssl.com/%E8%A7
    
    </summary>
    
    
      <category term="Tool" scheme="https://lany.me/tags/Tool/"/>
    
  </entry>
  
  <entry>
    <title>优化本地站内搜索功能</title>
    <link href="https://lany.me/front/hexo-search/"/>
    <id>https://lany.me/front/hexo-search/</id>
    <published>2016-10-22T01:12:28.000Z</published>
    <updated>2016-11-21T13:01:40.709Z</updated>
    
    <content type="html"><![CDATA[<p>主题使用的本地搜索功能，需安装<code>hexo-generator-search</code>插件生成 XML 格式的索引文件，或者安装<code>hexo-search</code>插件生成 json 格式的索引文件，本地站内搜索都是基于索引文件的。</p>
<p>但是默认生成<code>search.xml</code>索引文件比较大，这里我们说下优化<code>search.xml</code>索引文件大小，加快搜索速度。</p>
<a id="more"></a>
<h2 id="hexo-generator-search-插件修改"><a href="#hexo-generator-search-插件修改" class="headerlink" title="hexo-generator-search 插件修改"></a>hexo-generator-search 插件修改</h2><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>本地站内搜索都是基于索引文件的，Hexo 中可通过<code>hexo-generator-search</code>插件生成 XML 格式的索引文件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-search --save</div></pre></td></tr></table></figure>
<p>然后在 Hexo 站点根目录下的<code>_config.yml</code>中添加如下配置即可：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">search:</div><div class="line">  path: search.xml</div><div class="line">  field: all</div></pre></td></tr></table></figure>
<h3 id="修改插件"><a href="#修改插件" class="headerlink" title="修改插件"></a>修改插件</h3><ul>
<li>改造<code>index.js</code></li>
</ul>
<p>默认生成的<code>search.xml</code>文件很大，原生插件生成的内容太多了，还会包含代码行数、html 标签，包含很多冗余信息，所以有必要阉割 + 改造，参考网上部分文章，采用以下代码对其进行精简。</p>
<p>首先修改<code>node_modules/hexo-generator-search/index.js</code>文件，在其中添加 3 个函数，修改如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> merge = <span class="built_in">require</span>(<span class="string">'utils-merge'</span>);</div><div class="line"><span class="keyword">var</span> pathFn = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line">    </div><div class="line"><span class="keyword">var</span> config = hexo.config.search = merge(&#123;</div><div class="line">    <span class="attr">path</span>: <span class="string">'search.xml'</span>,</div><div class="line">    <span class="attr">field</span>: <span class="string">'post'</span></div><div class="line">&#125;, hexo.config.search);</div><div class="line">    </div><div class="line"><span class="comment">// Set default search path</span></div><div class="line"><span class="keyword">if</span> (!config.path)&#123;</div><div class="line">  config.path = <span class="string">'search.xml'</span>;</div><div class="line">&#125;</div><div class="line">    </div><div class="line"><span class="comment">// Add extension name if don't have</span></div><div class="line"><span class="keyword">if</span> (!pathFn.extname(config.path))&#123;</div><div class="line">  config.path += <span class="string">'.xml'</span>;</div><div class="line">&#125;</div><div class="line">    </div><div class="line">hexo.extend.generator.register(<span class="string">'search'</span>, <span class="built_in">require</span>(<span class="string">'./lib/generator'</span>));</div><div class="line">    </div><div class="line">stripe_code = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123; <span class="comment">// 去除代码行号，根据自己的主题修改</span></div><div class="line">    <span class="keyword">return</span> str.replace(<span class="regexp">/&lt;span class="line"&gt;[0-9]*&lt;\/span&gt;/ig</span>, <span class="string">''</span>);</div><div class="line">&#125;</div><div class="line">    </div><div class="line">&lt;!-- 或者将代码全部去除</div><div class="line">stripe_code = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123; <span class="comment">// 去除代码</span></div><div class="line">    <span class="keyword">return</span> str.replace(<span class="regexp">/&lt;figure class="highlight.*?&lt;\/figure&gt;/ig</span>, <span class="string">''</span>);</div><div class="line">&#125;</div><div class="line">--&gt;</div><div class="line">    </div><div class="line">stripe = <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123; <span class="comment">// 去除html标签</span></div><div class="line">    <span class="keyword">return</span> str.replace(<span class="regexp">/(&lt;([^&gt;]+)&gt;)/ig</span>, <span class="string">''</span>);</div><div class="line">&#125;</div><div class="line">minify = <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123; <span class="comment">// 压缩成一行</span></div><div class="line">    <span class="keyword">return</span> str.trim().replace(<span class="regexp">/\n/g</span>, <span class="string">' '</span>).replace(<span class="regexp">/\s+/g</span>, <span class="string">' '</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>阉割模板<code>search.ejs</code></li>
</ul>
<p>然后修改模板文件<code>search.ejs</code>，主要目的是调用上面添加的 3 个函数对实际内容进行精简，这里只保留链接、标题、内容。精简成下面这个样子就好了。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">search</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">%</span> <span class="attr">var</span> <span class="attr">url</span> = <span class="string">config.url</span> + <span class="attr">config.root</span> %&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span>(<span class="attr">posts</span>)&#123; %&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">posts.each</span>(<span class="attr">function</span>(<span class="attr">post</span>)&#123; %&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">entry</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">%-:</span> <span class="attr">post.title</span> | <span class="attr">cdata</span> %&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span><span class="tag">&lt;<span class="name">%-</span> <span class="attr">encodeURI</span>(<span class="attr">post.permalink</span>) %&gt;</span><span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">content</span> <span class="attr">type</span>=<span class="string">"html"</span>&gt;</span><span class="tag">&lt;<span class="name">%-:</span> <span class="attr">minify</span>(<span class="attr">stripe</span>(<span class="attr">stripe_code</span>(<span class="attr">post.content</span>))) | <span class="attr">cdata</span> %&gt;</span><span class="tag">&lt;/<span class="name">content</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%</span> &#125;) %&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span>(<span class="attr">pages</span>)&#123; %&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">pages.each</span>(<span class="attr">function</span>(<span class="attr">page</span>)&#123; %&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">entry</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">%-:</span> <span class="attr">page.title</span> | <span class="attr">cdata</span> %&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span><span class="tag">&lt;<span class="name">%-</span> <span class="attr">encodeURI</span>(<span class="attr">page.permalink</span>) %&gt;</span><span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">content</span> <span class="attr">type</span>=<span class="string">"html"</span>&gt;</span><span class="tag">&lt;<span class="name">%-:</span> <span class="attr">minify</span>(<span class="attr">stripe</span>(<span class="attr">stripe_code</span>(<span class="attr">page.content</span>))) | <span class="attr">cdata</span> %&gt;</span><span class="tag">&lt;/<span class="name">content</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%</span> &#125;) %&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">search</span>&gt;</span></div></pre></td></tr></table></figure>
<p>精简后，生成的<code>search.xml</code>文件体积可缩小为原来的 1/3，能有效加快搜索速度。</p>
<h2 id="hexo-search-插件修改"><a href="#hexo-search-插件修改" class="headerlink" title="hexo-search 插件修改"></a>hexo-search 插件修改</h2><h3 id="安装插件-1"><a href="#安装插件-1" class="headerlink" title="安装插件"></a>安装插件</h3><p>本地站内搜索都是基于索引文件的，Hexo 中可通过<code>hexo-search</code>插件生成 json 格式的索引文件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-search --save</div></pre></td></tr></table></figure>
<p>然后在Hexo站点根目录下的<code>_config.yml</code>中添加如下配置即可：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">search:</div><div class="line">  path: search.json</div><div class="line">  <span class="built_in">source</span>: all <span class="comment"># other values: posts, pages </span></div><div class="line">  trim_html: <span class="literal">false</span></div></pre></td></tr></table></figure>
<h3 id="修改插件-1"><a href="#修改插件-1" class="headerlink" title="修改插件"></a>修改插件</h3><ul>
<li>改造<code>index.js</code></li>
</ul>
<p>默认生成的<code>search.json</code>文件很大，原生插件生成的内容太多了，还会包含代码行数、html 标签，包含很多冗余信息，所以有必要阉割 + 改造，参考网上部分文章，采用以下代码对其进行精简。</p>
<p>首先修改<code>node_modules/hexo-search/index.js</code>文件，在其中添加 3 个函数，修改如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line">    </div><div class="line"><span class="keyword">var</span> merge = <span class="built_in">require</span>(<span class="string">'utils-merge'</span>);</div><div class="line"><span class="keyword">var</span> pathFn = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line">    </div><div class="line"><span class="keyword">var</span> config = hexo.config.search = merge(&#123;</div><div class="line">  <span class="attr">path</span>: <span class="string">'search.json'</span>,</div><div class="line">  <span class="attr">source</span>: <span class="string">'all'</span>,</div><div class="line">  <span class="attr">trim_html</span>: <span class="literal">false</span></div><div class="line">&#125;, hexo.config.search);</div><div class="line">    </div><div class="line"><span class="comment">// Set default search path</span></div><div class="line"><span class="keyword">if</span> (!config.path) &#123;</div><div class="line">  config.path = <span class="string">'search.json'</span>;</div><div class="line">&#125;</div><div class="line">    </div><div class="line"><span class="comment">// Add extension name if don't have</span></div><div class="line"><span class="keyword">if</span> (!pathFn.extname(config.path)) &#123;</div><div class="line">  config.path += <span class="string">'.json'</span>;</div><div class="line">&#125;</div><div class="line">    </div><div class="line">hexo.extend.generator.register(<span class="string">'search'</span>, <span class="built_in">require</span>(<span class="string">'./lib/generator'</span>));</div><div class="line">    </div><div class="line"><span class="comment">// 以下为增加的内容</span></div><div class="line">stripe_code = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123; <span class="comment">// 去除代码行号，根据自己的主题修改</span></div><div class="line">    <span class="keyword">return</span> str.replace(<span class="regexp">/&lt;span class="line"&gt;[0-9]*&lt;\/span&gt;/ig</span>, <span class="string">''</span>);</div><div class="line">&#125;</div><div class="line">    </div><div class="line">&lt;!-- 或者将代码全部去除，上面这条代码跟此条代码任选其一</div><div class="line">stripe_code = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123; <span class="comment">// 去除代码</span></div><div class="line">    <span class="keyword">return</span> str.replace(<span class="regexp">/&lt;figure class="highlight.*?&lt;\/figure&gt;/ig</span>, <span class="string">''</span>);</div><div class="line">&#125;</div><div class="line">--&gt;</div><div class="line">    </div><div class="line">stripe = <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123; <span class="comment">// 去除html标签</span></div><div class="line">    <span class="keyword">return</span> str.replace(<span class="regexp">/(&lt;([^&gt;]+)&gt;)/ig</span>, <span class="string">''</span>);</div><div class="line">&#125;</div><div class="line">minify = <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123; <span class="comment">// 压缩成一行</span></div><div class="line">    <span class="keyword">return</span> str.trim().replace(<span class="regexp">/\n/g</span>, <span class="string">' '</span>).replace(<span class="regexp">/\s+/g</span>, <span class="string">' '</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>修改库<code>node_modules/hexo-search/lib/generator.js</code></li>
</ul>
<p>然后修改库文件<code>generator.js</code>，主要目的是调用上面添加的 3 个函数对实际内容进行精简，这里只保留链接、标题、内容。精简成下面这个样子就好了。搜索<code>sources.forEach(function(post)</code>将其替换为如下代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//原代码</span></div><div class="line">sources.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">post</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> item = &#123;</div><div class="line">    <span class="attr">title</span>: post.title,</div><div class="line">    <span class="attr">url</span>: config.url + <span class="string">'/'</span> + post.path,</div><div class="line">    <span class="attr">content</span>: post.content</div><div class="line">  &#125;;</div><div class="line">  data.push(item);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//修改后代码</span></div><div class="line">sources.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">post</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> item = &#123;</div><div class="line">    <span class="attr">title</span>: post.title,</div><div class="line">    <span class="attr">url</span>: config.url + <span class="string">'/'</span> + post.path,</div><div class="line">    <span class="attr">content</span>: minify(stripe(stripe_code(post.content)))</div><div class="line">  &#125;;</div><div class="line">  data.push(item);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>精简后，生成的<code>search.json</code>文件体积可缩小为原来的 1/5，能有效加快搜索速度。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主题使用的本地搜索功能，需安装&lt;code&gt;hexo-generator-search&lt;/code&gt;插件生成 XML 格式的索引文件，或者安装&lt;code&gt;hexo-search&lt;/code&gt;插件生成 json 格式的索引文件，本地站内搜索都是基于索引文件的。&lt;/p&gt;
&lt;p&gt;但是默认生成&lt;code&gt;search.xml&lt;/code&gt;索引文件比较大，这里我们说下优化&lt;code&gt;search.xml&lt;/code&gt;索引文件大小，加快搜索速度。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://lany.me/category/front/"/>
    
    
      <category term="Hexo" scheme="https://lany.me/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo添加文章置顶功能</title>
    <link href="https://lany.me/front/hexo-top/"/>
    <id>https://lany.me/front/hexo-top/</id>
    <published>2016-10-21T23:57:16.000Z</published>
    <updated>2016-11-20T07:55:20.826Z</updated>
    
    <content type="html"><![CDATA[<p>考虑到之前的博客有置顶文章，所以需要置顶功能。</p>
<a id="more"></a>
<p>修改<code>node_modules/hexo-generator-index/lib/generator.js</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line">  </div><div class="line"><span class="keyword">var</span> pagination = <span class="built_in">require</span>(<span class="string">'hexo-pagination'</span>);</div><div class="line">  </div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">locals</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> config = <span class="keyword">this</span>.config;</div><div class="line">  <span class="keyword">var</span> posts = locals.posts;</div><div class="line">  </div><div class="line">    posts.data = posts.data.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(a.top &amp;&amp; b.top) &#123; <span class="comment">// 两篇文章 top 都有定义</span></div><div class="line">            <span class="keyword">if</span>(a.top == b.top) <span class="keyword">return</span> b.date - a.date; <span class="comment">// 若 top 值一样则按照文章日期降序排</span></div><div class="line">            <span class="keyword">else</span> <span class="keyword">return</span> b.top - a.top; <span class="comment">// 否则按照 top 值降序排</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a.top &amp;&amp; !b.top) &#123; <span class="comment">// 以下是只有一篇文章 top 有定义，那么将有 top 的排在前面（这里用异或操作居然不行233）</span></div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!a.top &amp;&amp; b.top) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> b.date - a.date; <span class="comment">// 都没定义按照文章日期降序排</span></div><div class="line">  </div><div class="line">    &#125;);</div><div class="line">  </div><div class="line">  <span class="keyword">var</span> paginationDir = config.pagination_dir || <span class="string">'page'</span>;</div><div class="line">  </div><div class="line">  <span class="keyword">return</span> pagination(<span class="string">''</span>, posts, &#123;</div><div class="line">    <span class="attr">perPage</span>: config.index_generator.per_page,</div><div class="line">    <span class="attr">layout</span>: [<span class="string">'index'</span>, <span class="string">'archive'</span>],</div><div class="line">    <span class="attr">format</span>: paginationDir + <span class="string">'/%d/'</span>,</div><div class="line">    <span class="attr">data</span>: &#123;</div><div class="line">      <span class="attr">__index</span>: <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>修改<code>generator.js</code>完成后只需要在 front-matter 中设置需要置顶文章的<code>top</code>值，将会根据 top 值大小来选择置顶顺序。（大的在前面）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">title: </div><div class="line">date: </div><div class="line">tags:</div><div class="line">top: 0 		<span class="comment">#0为假不排序  N ~ 1 由高到低依次排序  </span></div><div class="line">---</div></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>原文地址：<code>http://www.netcan666.com/2015/11/22/%E8%A7%A3%E5%86%B3Hexo%E7%BD%AE%E9%A1%B6%E9%97%AE%E9%A2%98/</code></li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;考虑到之前的博客有置顶文章，所以需要置顶功能。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://lany.me/category/front/"/>
    
    
      <category term="Hexo" scheme="https://lany.me/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>零基础免费搭建个人博客（hexo+coding）</title>
    <link href="https://lany.me/learn/hexo-coding/"/>
    <id>https://lany.me/learn/hexo-coding/</id>
    <published>2016-10-18T11:40:06.000Z</published>
    <updated>2016-11-20T07:53:48.666Z</updated>
    
    <content type="html"><![CDATA[<p>使用 hexo 生成静态博客并架设在免费的 coding 的 Pages 服务</p>
<a id="more"></a>
<blockquote>
<p>准备</p>
</blockquote>
<ul>
<li><p>安装 Node.js  </p>
<ul>
<li><a href="https://nodejs.org/dist/v4.6.0/node-v4.6.0-x86.msi" target="_blank" rel="external">x32</a></li>
<li><a href="https://nodejs.org/dist/v4.6.0/node-v4.6.0-x64.msi" target="_blank" rel="external">x64</a></li>
</ul>
</li>
</ul>
<p>安装比较简单，一直 next 就行，如下图：</p>
<p><img src="https://ww1.sinaimg.cn/large/a05bd5c8gw1f93dhyuwqtg20e30azk1q.gif" alt="Node.js"></p>
<ul>
<li><p>安装 Git</p>
<ul>
<li><a href="https://git-scm.com/download/win" target="_blank" rel="external">Git</a></li>
</ul>
</li>
</ul>
<p><img src="https://ww1.sinaimg.cn/large/a05bd5c8gw1f93dhpgp5qg20e30azn4x.gif" alt="Git"></p>
<ul>
<li>验证软件正确安装</li>
</ul>
<p>同时按下 <code>Win+R</code> 键（或者点击 <code>开始菜单</code> -&gt; <code>运行</code> ），打开运行窗口,输入 <code>cmd</code> ，然后输入以下命令，结果与下图相同则说明安装正确，若不正确可以卸载软件重新安装。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git --version</div><div class="line">node -v</div><div class="line">npm -v</div></pre></td></tr></table></figure>
<p><img src="https://ww1.sinaimg.cn/large/a05bd5c8gw1f93dhm1itpj20iw0cct93.jpg" alt="cmd验证"></p>
<blockquote>
<p>安装 Hexo</p>
</blockquote>
<ul>
<li>在电脑上新建一个 blog 文件夹（任意位置）,该文件夹用于存放你的博客文件，然后右键单击选择 <code>Git Bash</code>  ，大家估计都有被“墙”的经历，安装 hexo 为了避免出现类似情况，我们使用淘宝 NPM 镜像下载 hexo ，先输入以下命令使用淘宝 NPM 镜像。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure>
<p><img src="https://ww3.sinaimg.cn/large/a05bd5c8gw1f93dhw1duhg20im0eaqd0.gif" alt="设置淘宝NPM镜像"></p>
<ul>
<li>然后开始安装 hexo</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm install -g hexo-cli</div></pre></td></tr></table></figure>
<p><img src="https://ww1.sinaimg.cn/large/a05bd5c8gw1f93dhwmrt2g20im0eadl0.gif" alt="安装Hexo"></p>
<ul>
<li>继续输入以下命令</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm install hexo --save</div></pre></td></tr></table></figure>
<p><img src="https://ww1.sinaimg.cn/large/a05bd5c8gw1f93dhxdvsqg20im0eadjp.gif" alt="hexo_save"></p>
<ul>
<li>安装完成后，在输入命令，验证是否安装正确</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo -v</div></pre></td></tr></table></figure>
<p><img src="https://ww1.sinaimg.cn/large/a05bd5c8gw1f93dhu2uwcj20hj0d5mxx.jpg" alt="hexo-v"></p>
<blockquote>
<p>本地运行 Hexo</p>
</blockquote>
<ul>
<li>初始化 hexo</li>
</ul>
<p>可能时间较长，按网速而定，耐心等待</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init</div></pre></td></tr></table></figure>
<p><img src="https://ww1.sinaimg.cn/large/a05bd5c8gw1f93dhunaijg20gj0920y7.gif" alt="hexo-s-g"></p>
<ul>
<li>安装生成器</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm install</div></pre></td></tr></table></figure>
<p><img src="https://ww3.sinaimg.cn/large/a05bd5c8gw1f93dhm41q0g20gj092jts.gif" alt="cnpm-install"></p>
<ul>
<li>运行 hexo</li>
</ul>
<p>以后要在本地运行博客只要输入该命令即可</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo s -g</div></pre></td></tr></table></figure>
<p><img src="https://ww3.sinaimg.cn/large/a05bd5c8gw1f93dhtq6bog20gj0921ip.gif" alt="hexo-s-g"></p>
<ul>
<li>打开浏览器，输入 <a href="http://localhost:4000/" target="_blank" rel="external">localhost:4000</a>  就可以在本地看到你的个人博客了</li>
</ul>
<p>按 <code>Ctrl+C</code> 键即可停止</p>
<blockquote>
<p>申请 coding</p>
</blockquote>
<ul>
<li>进入 coding 官网<a href="https://coding.net/register" title="用户注册" target="_blank" rel="external">注册</a></li>
</ul>
<p><img src="https://ww1.sinaimg.cn/mw690/a05bd5c8gw1f93dhos4ygj20i00egdgl.jpg" alt=""></p>
<ul>
<li>登陆，创建新项目</li>
</ul>
<p><img src="https://ww3.sinaimg.cn/large/a05bd5c8gw1f93dhnlj6aj20cp0970so.jpg" alt="coding.new"><br><img src="https://ww3.sinaimg.cn/large/a05bd5c8gw1f93dhnxdaaj20mn0lp0tg.jpg" alt="coding.new"></p>
<ul>
<li>开启 <code>pages</code> 服务</li>
</ul>
<p><img src="https://ww1.sinaimg.cn/large/a05bd5c8gw1f93dho7kvbj20sc0gqaas.jpg" alt="pages"></p>
<ul>
<li>绑定域名</li>
</ul>
<p><img src="https://ww3.sinaimg.cn/large/a05bd5c8gw1f93dhn1my4j20nc0eh3yy.jpg" alt="绑定域名"></p>
<ul>
<li>解析域名</li>
</ul>
<p>选 <code>CNAME</code> 解析，记录值如下:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pages.coding.me.</div></pre></td></tr></table></figure>
<p><img src="https://ww1.sinaimg.cn/large/a05bd5c8gw1f93dhmkqbyj20th093wew.jpg" alt="cname"></p>
<ul>
<li>复制 <code>HTTPS</code></li>
</ul>
<p><code>用户名</code> 替换成你自己的用户名</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://git.coding.net/用户名/用户名.git</div></pre></td></tr></table></figure>
<p><img src="https://ww1.sinaimg.cn/large/a05bd5c8gw1f93dhn2h0yj208208ljre.jpg" alt="cpy"></p>
<blockquote>
<p>配置 Hexo</p>
</blockquote>
<ul>
<li>打开之前 blog 文件夹中的 <code>_config.yml</code></li>
</ul>
<p>这里推荐使用 <a href="https://notepad-plus-plus.org/repository/7.x/7.1/npp.7.1.Installer.exe" target="_blank" rel="external">NotePad++</a> 进行编辑找到最后的 deploy 处，修改成如下，然后保存。<br>​<br>注意 <code>:</code> 后面有一个空格不能少，否则会出错；记得 <code>用户名</code> 换成自己的。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Deployment</span></div><div class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></div><div class="line">deploy:</div><div class="line">    <span class="built_in">type</span>: git</div><div class="line">    repo: https://git.coding.net/用户名/用户名.git</div><div class="line">    branch: coding-pages</div></pre></td></tr></table></figure>
<p><img src="https://ww3.sinaimg.cn/large/a05bd5c8gw1f93dhlo62ng20i20doqc0.gif" alt="_config.yml"></p>
<ul>
<li>设置 git 身份信息</li>
</ul>
<p>将下方的你的 <code>用户名</code> 、 <code>邮箱</code> 替换成自己的。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name <span class="string">"用户名"</span></div><div class="line">git config --global user.email <span class="string">"邮箱"</span></div></pre></td></tr></table></figure>
<ul>
<li>安装 hexo git 插件</li>
</ul>
<p>在 blog 文件夹空白处右键 <code>Git Bash</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<ul>
<li>发布更新博客到 coding</li>
</ul>
<p>发布时会弹出 coding 的登陆框，按要求输入 coding 的用户密码就行了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d -g</div></pre></td></tr></table></figure>
<p>发布成功后，访问  <code>用户名.coding.me</code>  或之前绑定的域名 <code>lany.me</code> 看下成果。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 hexo 生成静态博客并架设在免费的 coding 的 Pages 服务&lt;/p&gt;
    
    </summary>
    
      <category term="学习" scheme="https://lany.me/category/learn/"/>
    
    
      <category term="Hexo" scheme="https://lany.me/tags/Hexo/"/>
    
  </entry>
  
</feed>
