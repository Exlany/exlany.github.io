[{"title":"让多说评论头像，表情支持https","url":"https://lany.me/front/hexo-duoshuo/","content":"原理 ：将 https 图片转由七牛镜像 CDN 处理 方法一(直接调用)直接替换多说 embed.js 方法二(自己修改)1. 修改头像 https 支持 embed.js 中搜索avatarUrl: function(e, t)，将下方/* ··· */中代码插入如下位置 embed.js 中搜索return &#39;&lt;li class=&quot;ds-ctx-entry&quot;，将下方/* ··· */中代码插入如下位置 2. 修改表情 https 支持 embed.js 中搜索http://img.t.sinajs.cn/t35/style/images/common/face/ext/normal/，将下方/* ··· */中代码插入如下位置 embed.js 中搜索&lt;li class=&quot;ds-post&quot; data-post-id=&quot;，将下方/* ··· */中代码插入如下位置 3. 修改 WS 为 WSS embed.js 中搜索ws://ws.duoshuo.com:8201/，将它替换成 主要参考 @rainwsy 的https://github.com/rainwsy/duoshuo-https中的代码。 由于我自己的 embed.js 增加了 UA 标识等代码，因此就没有直接使用 @rainwsy 的，自己修改了代码，hexo 的可以使用我的 embed.js，也可以使用 @rainwsy 的 embed.js。"},{"title":"算法排序学习","url":"https://lany.me/learn/algorithm-basics/","content":"从今天开始逐步开始学习算法部分的内容。 算法基础插入排序 时间复杂度：$O(n^2)$ 插入排序的工作方式像排序一手扑克牌，开始时，我们的左手为空并且桌子上的牌面向下。然后，我们每次从桌子上拿走一张牌并将它插入左手中正确的位置。为了找到一张牌的正确位置，我们从右到左将它与已在手中的每张牌进行比较，然后找到合适的位置将其插入。然后重复抓牌，插入。 理解原理之后，我们开始着手实现。先定义一个的数组 int arr[128] = { 5,1,8,7,4,2,3,9,6 }; 可以理解为洗好的牌。 第二部开始抓第一张牌，然后再抓第二张拍，做比较，然后根据比较结果插入。这里我们采用一个 while 判断循环来实现 对比 → 插入 的过程。并且有多少张牌我们就要重复抓取几次，因此我们写一个 for 循环来进行抓牌。 下面用一个插图形象表示下 练习： [x] 根据上图为模型重写 void InsertionSort() 使之变降序排列"},{"title":"一个建筑规范批量查询小工具","url":"https://lany.me/null/tool-gfgqcx/","content":"今天工作需要用到批量查询一些建筑规范是否已经过期作废，翻到几年前写的源码，把功能加强了下满足目前的工作需要，顺便增加了个简易自动更新的功能，也许过几年又想起来更新下呢。。。 下载地址 (这是搬砖的人才用的玩意，不是搬砖的就不要下载了。。。)最后更新:2016-11-11, 17:09:53"},{"title":"优化本地站内搜索功能","url":"https://lany.me/front/hexo-search/","content":"主题使用的本地搜索功能，需安装hexo-generator-search插件生成 XML 格式的索引文件，或者安装hexo-search插件生成 json 格式的索引文件，本地站内搜索都是基于索引文件的。 但是默认生成search.xml索引文件比较大，这里我们说下优化search.xml索引文件大小，加快搜索速度。 &lt;!- -more –&gt; hexo-generator-search 插件修改安装插件本地站内搜索都是基于索引文件的，Hexo 中可通过hexo-generator-search插件生成 XML 格式的索引文件。 然后在 Hexo 站点根目录下的_config.yml中添加如下配置即可： 修改插件 改造index.js 默认生成的search.xml文件很大，原生插件生成的内容太多了，还会包含代码行数、html 标签，包含很多冗余信息，所以有必要阉割 + 改造，参考网上部分文章，采用以下代码对其进行精简。 首先修改node_modules/hexo-generator-search/index.js文件，在其中添加 3 个函数，修改如下： 阉割模板search.ejs 然后修改模板文件search.ejs，主要目的是调用上面添加的 3 个函数对实际内容进行精简，这里只保留链接、标题、内容。精简成下面这个样子就好了。 精简后，生成的search.xml文件体积可缩小为原来的 1/3，能有效加快搜索速度。 hexo-search 插件修改安装插件本地站内搜索都是基于索引文件的，Hexo 中可通过hexo-search插件生成 json 格式的索引文件。 然后在Hexo站点根目录下的_config.yml中添加如下配置即可： 修改插件 改造index.js 默认生成的search.json文件很大，原生插件生成的内容太多了，还会包含代码行数、html 标签，包含很多冗余信息，所以有必要阉割 + 改造，参考网上部分文章，采用以下代码对其进行精简。 首先修改node_modules/hexo-search/index.js文件，在其中添加 3 个函数，修改如下： 修改库node_modules/hexo-search/lib/generator.js 然后修改库文件generator.js，主要目的是调用上面添加的 3 个函数对实际内容进行精简，这里只保留链接、标题、内容。精简成下面这个样子就好了。搜索sources.forEach(function(post)将其替换为如下代码 精简后，生成的search.json文件体积可缩小为原来的 1/5，能有效加快搜索速度。"},{"title":"Hexo添加文章置顶功能","url":"https://lany.me/front/hexo-top/","content":"考虑到之前的博客有置顶文章，所以需要置顶功能。 修改node_modules/hexo-generator-index/lib/generator.js 修改generator.js完成后只需要在 front-matter 中设置需要置顶文章的top值，将会根据 top 值大小来选择置顶顺序。（大的在前面） 原文地址：http://www.netcan666.com/2015/11/22/%E8%A7%A3%E5%86%B3Hexo%E7%BD%AE%E9%A1%B6%E9%97%AE%E9%A2%98/"},{"title":"零基础免费搭建个人博客（hexo+coding）","url":"https://lany.me/learn/hexo-coding/","content":"使用 hexo 生成静态博客并架设在免费的 coding 的 Pages 服务 准备 安装 Node.js x32 x64 安装比较简单，一直 next 就行，如下图： 安装 Git Git 验证软件正确安装 同时按下 Win+R 键（或者点击 开始菜单 -&gt; 运行 ），打开运行窗口,输入 cmd ，然后输入以下命令，结果与下图相同则说明安装正确，若不正确可以卸载软件重新安装。 安装 Hexo 在电脑上新建一个 blog 文件夹（任意位置）,该文件夹用于存放你的博客文件，然后右键单击选择 Git Bash ，大家估计都有被“墙”的经历，安装 hexo 为了避免出现类似情况，我们使用淘宝 NPM 镜像下载 hexo ，先输入以下命令使用淘宝 NPM 镜像。 然后开始安装 hexo 继续输入以下命令 安装完成后，在输入命令，验证是否安装正确 本地运行 Hexo 初始化 hexo 可能时间较长，按网速而定，耐心等待 安装生成器 运行 hexo 以后要在本地运行博客只要输入该命令即可 打开浏览器，输入 localhost:4000 就可以在本地看到你的个人博客了 按 Ctrl+C 键即可停止 申请 coding 进入 coding 官网注册 登陆，创建新项目 开启 pages 服务 绑定域名 解析域名 选 CNAME 解析，记录值如下: 复制 HTTPS 用户名 替换成你自己的用户名 配置 Hexo 打开之前 blog 文件夹中的 _config.yml 这里推荐使用 NotePad++ 进行编辑找到最后的 deploy 处，修改成如下，然后保存。​注意 : 后面有一个空格不能少，否则会出错；记得 用户名 换成自己的。 设置 git 身份信息 将下方的你的 用户名 、 邮箱 替换成自己的。 安装 hexo git 插件 在 blog 文件夹空白处右键 Git Bash 发布更新博客到 coding 发布时会弹出 coding 的登陆框，按要求输入 coding 的用户密码就行了。 发布成功后，访问 用户名.coding.me 或之前绑定的域名 lany.me 看下成果。"},{"title":"about","url":"https://lany.me/about/index.html","content":""},{"title":"link","url":"https://lany.me/link/index.html","content":""},{"title":"category","url":"https://lany.me/category/index.html","content":""},{"title":"project","url":"https://lany.me/project/index.html","content":""},{"title":"tag","url":"https://lany.me/tags/index.html","content":""},{"title":"search","url":"https://lany.me/search/index.html","content":""}]